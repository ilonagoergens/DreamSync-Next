name: Build und push Docker Images

on:
  push:
    branches: [main] # bei push auf die main

jobs:
  build-and-push:
    runs-on: ubuntu-latest # die issolierte Umgebung von GitHub Actions

    env: # Umgebungsvariablen
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      PORT: ${{ secrets.PORT }}
      VITE_API_URL: ${{ secrets.VITE_API_URL }}
      VITE_CLIENT_URL: ${{ secrets.VITE_CLIENT_URL }}
      CLIENT_ORIGIN: ${{ secrets.CLIENT_ORIGIN }}

    steps:
      # Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v2
      # Docker login datem von GitHub Secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Backend Image bauen und pushen
      - name: Build and push Backend Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.backend
          push: true # sorgt daf√ºr, dass das Image gepusht wird
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest
          build-args: |
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PORT=${{ secrets.PORT }}
            CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }}
      # Frontend Image bauen und pushen
      - name: Build and push Frontend Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_CLIENT_URL=${{ secrets.VITE_CLIENT_URL }}
 
  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker stop dreamsync-backend || true
            docker rm dreamsync-backend || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/backend:latest || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker run -d --name dreamsync-backend \
             --env-file /home/ubuntu/.env \
             --network dreamsync-net \
             -p 3000:3000 ilonagoergens/backend:latest


            docker stop dreamsync-frontend || true
            docker rm dreamsync-frontend || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/frontend:latest || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker run -d --name dreamsync-frontend \
             --network dreamsync-net \
             -p 80:80 -p 443:443 ilonagoergens/frontend:latest
